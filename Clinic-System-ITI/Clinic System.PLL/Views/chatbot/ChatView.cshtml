@using Clinic_System.BLL.ModelVM.FeedBackVM
@model AddFeedbackVM
@using System.Security.Claims;
@using Clinic_System.BLL.Helper;
@using Microsoft.AspNetCore.Identity;
@using Clinic_System.DAL.Entities
@using Clinic_System.PLL.Controllers

@{
    ViewData["Title"] = "Royal Clinic";
}

<h2>Chat with the Bot</h2>

<form id="chatForm">
    <textarea id="userMessage" placeholder="Write your question here..." rows="4" class="form-control"></textarea>
    <br>
    <input type="file" id="fileUpload" accept="image/*,audio/*" class="form-control">
    <br>
    <button type="button" id="recordBtn" class="btn btn-warning">🎤 Record</button>
    <button type="submit" class="btn btn-primary">Send</button>
</form>

<hr>

<div id="chatResponse" style="margin-top:20px;"></div>

<script>


    
    let mediaRecorder;
    let audioChunks = [];
    let recordedAudioFile = null;

    // بدء التسجيل
    document.getElementById('recordBtn').addEventListener('click', async () => {
        if (!mediaRecorder || mediaRecorder.state === "inactive") {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            mediaRecorder = new MediaRecorder(stream);
            audioChunks = [];

            mediaRecorder.ondataavailable = event => {
                if (event.data.size > 0) {
                    audioChunks.push(event.data);
                }
            };

            mediaRecorder.onstop = () => {
                const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                recordedAudioFile = new File([audioBlob], "record.wav", { type: 'audio/wav' });
                alert("تم الانتهاء من التسجيل.");
            };

            mediaRecorder.start();
            document.getElementById('recordBtn').innerText = "⏹️ إيقاف التسجيل";
        } else if (mediaRecorder.state === "recording") {
            mediaRecorder.stop();
            document.getElementById('recordBtn').innerText = "🎤 تسجيل";
        }
    });

    // إرسال البيانات
    document.getElementById('chatForm').addEventListener('submit', async function (e) {
        e.preventDefault();

        const userMessage = document.getElementById('userMessage').value;
        const sessionId = 'session_' + Date.now();
        const fileInput = document.getElementById('fileUpload');

        const formData = new FormData();
        formData.append("session_id", sessionId);
        formData.append("message", userMessage);

        if (fileInput.files.length > 0) {
            formData.append("file", fileInput.files[0]);
        }

        if (recordedAudioFile) {
            formData.append("file", recordedAudioFile);
        }

        const response = await fetch("/ChatBot/GetResponseFromChatBot", {
            method: "POST",
            body: formData
        });

        if (response.ok) {
            const data = await response.json();
            const decoded = decodeUnicode(data.response);
            document.getElementById('chatResponse').innerHTML += `<p><strong>🤖</strong> ${decoded}</p>`;
        } else {
            document.getElementById('chatResponse').innerHTML += `<p style="color:red;">⚠️ فشل إرسال الرسالة</p>`;
        }

        recordedAudioFile = null;
        document.getElementById('userMessage').value = "";
        fileInput.value = "";
    });

    // دالة فك ترميز Unicode
    function decodeUnicode(str) {
        return str.replace(/\\u([\dA-F]{4})/gi, function (match, grp) {
            return String.fromCharCode(parseInt(grp, 16));
        });
    }
</script>
